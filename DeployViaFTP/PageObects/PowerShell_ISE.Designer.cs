// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace DeployViaFTP.PageObects.PowerShell_ISEClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class PowerShell_ISE
    {
        
        /// <summary>
        /// ClosePowerShell_ISE
        /// </summary>
        public void ClosePowerShell_ISE()
        {
            #region Variable Declarations
            WpfMenuItem uIExitMenuItem = this.UIWindowsPowerShellISEWindow.UIMainMenuMenu.UIFileMenuItem.UIExitMenuItem;
            #endregion

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(60, 14));
        }
        
        /// <summary>
        /// OpenFTP_Blog_To_Azure_script - Use 'OpenFTP_Blog_To_Azure_scriptParams' to pass parameters into this method.
        /// </summary>
        public void OpenFTP_Blog_To_Azure_script()
        {
            #region Variable Declarations
            WpfMenuItem uIOpenMenuItem = this.UIWindowsPowerShellISEWindow.UIMainMenuMenu.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow.UIFilenameComboBox;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            #endregion

            // Click 'File' -> 'Open...' menu item
            Mouse.Click(uIOpenMenuItem, new Point(37, 10));

            // Select 'C:\deploy\drop\scripts\ftp_blog_to_azure.ps1' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.OpenFTP_Blog_To_Azure_scriptParams.UIFilenameComboBoxEditableItem;

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(26, 12));
        }
        
        /// <summary>
        /// RunPowerShellScript
        /// </summary>
        public void RunPowerShellScript()
        {
            #region Variable Declarations
            WpfMenuItem uIRunMenuItem = this.UIWindowsPowerShellISEWindow.UIMainMenuMenu.UIFileMenuItem.UIRunMenuItem;
            #endregion

            // Click 'File' -> 'Run' menu item
            Mouse.Click(uIRunMenuItem, new Point(48, 15));
        }
        
        #region Properties
        public virtual OpenFTP_Blog_To_Azure_scriptParams OpenFTP_Blog_To_Azure_scriptParams
        {
            get
            {
                if ((this.mOpenFTP_Blog_To_Azure_scriptParams == null))
                {
                    this.mOpenFTP_Blog_To_Azure_scriptParams = new OpenFTP_Blog_To_Azure_scriptParams();
                }
                return this.mOpenFTP_Blog_To_Azure_scriptParams;
            }
        }
        
        public UIWindowsPowerShellISEWindow UIWindowsPowerShellISEWindow
        {
            get
            {
                if ((this.mUIWindowsPowerShellISEWindow == null))
                {
                    this.mUIWindowsPowerShellISEWindow = new UIWindowsPowerShellISEWindow();
                }
                return this.mUIWindowsPowerShellISEWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private OpenFTP_Blog_To_Azure_scriptParams mOpenFTP_Blog_To_Azure_scriptParams;
        
        private UIWindowsPowerShellISEWindow mUIWindowsPowerShellISEWindow;
        
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenFTP_Blog_To_Azure_script'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class OpenFTP_Blog_To_Azure_scriptParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'C:\deploy\drop\scripts\ftp_blog_to_azure.ps1' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "C:\\deploy\\drop\\scripts\\ftp_blog_to_azure.ps1";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWindowsPowerShellISEWindow : WpfWindow
    {
        
        public UIWindowsPowerShellISEWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Windows PowerShell ISE Main Window";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Administrator: Windows PowerShell ISE");
            #endregion
        }
        
        #region Properties
        public UIMainMenuMenu UIMainMenuMenu
        {
            get
            {
                if ((this.mUIMainMenuMenu == null))
                {
                    this.mUIMainMenuMenu = new UIMainMenuMenu(this);
                }
                return this.mUIMainMenuMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIMainMenuMenu mUIMainMenuMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMainMenuMenu : WpfMenu
    {
        
        public UIMainMenuMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.AutomationId] = "MenuBar";
            this.WindowTitles.Add("Administrator: Windows PowerShell ISE");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WpfMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "MenuFile";
            this.WindowTitles.Add("Administrator: Windows PowerShell ISE");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "MenuOpenScript";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Administrator: Windows PowerShell ISE");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WpfMenuItem UIRunMenuItem
        {
            get
            {
                if ((this.mUIRunMenuItem == null))
                {
                    this.mUIRunMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIRunMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "MenuRunScript";
                    this.mUIRunMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIRunMenuItem.WindowTitles.Add("Administrator: Windows PowerShell ISE");
                    #endregion
                }
                return this.mUIRunMenuItem;
            }
        }
        
        public WpfMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "MenuFileExit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("Administrator: Windows PowerShell ISE");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIOpenMenuItem;
        
        private WpfMenuItem mUIRunMenuItem;
        
        private WpfMenuItem mUIExitMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
}
