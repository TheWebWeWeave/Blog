pipeline {
    agent any
    parameters {
        string( name: 'semver', defaultValue: '1.0.0',
         description: 'the resulting semver version number after running gitversion on the source at GitHub')
        string( name: 'branchname', defaultValue: 'master',
         description: 'the actual branch name that triggered the build as precurred from gitVersion') 
    }
    environment {
        REGISTRY='registry.t3winc.com'
        RELEASE='1.12.0'
        BRANCH_NAME="${params.branchname}"
    }
    stages {
        stage("Initialization"){
            steps {
                buildName "${params.semver}"
                buildDescription "${params.branchname}"
            }
        }
        stage('Verify'){
            steps {
                sh 'chmod +x ./build/ci/00-verify.sh'
                sh './build/ci/00-verify.sh'
                echo "GIT_BRANCH: ${env.GIT_BRANCH}"
                echo "BRANCH_NAME: ${env.BRANCH_NAME}"
            }
        }
        stage('Version') {
            steps {
                echo "my semver version is: ${params.semver}"
                sh 'chmod +x ./build/ci/01-version.sh'
                sh './build/ci/01-version.sh'
            }
        }
        stage('Build'){
            steps {
                sh 'chmod +x ./build/ci/02-build.sh'
                sh './build/ci/02-build.sh'
            }
        }
        stage('Test-Image'){
            steps {
                script {
                    try {                           
                        def status = sh(returnStdout: true, script: "container-structure-test test --image 'donaldonsoftware' --config './test/DockerTest/unit-test.yaml' --verbosity 'debug' --json | jq .Fail") as Integer
                        echo status
                        if (status != 0) {                            
                            error 'Image Test has failed'
                        }

                    } catch (err) {
                        error "Test-Image ERROR: The execution of the container structure tests failed, see the log for details."
                        echo err
                    } 
                }
            }
        }

/*        
        stage('Publish-Topic'){
            steps {
                sh 'chmod +x ./build/ci/03-publish-testing.sh'
                sh "./build/ci/03-publish-testing.sh ${params.semver}"
            }
        }
        stage('Publish-Master'){
            when {
                environment name: 'BRANCH_NAME', value: 'master'
            }
            steps {
                sh 'chmod +x ./build/ci/03-publish.sh'
                sh "./build/ci/03-publish.sh ${params.semver}"
            }
        }
        stage('Deploy'){
            steps {
                sh 'chmod +x ./build/ci/04-deploy.sh'
                sh "./build/ci/04-deploy.sh ${params.semver}"
            }
        }
        stage('Release'){
            agent{
                label 'AWS-Jenkins-Slave'
            }            
            when {
                environment name: 'BRANCH_NAME', value: 'master'
            }
            steps {
                input 'Release to Production?'
                sh 'chmod +x ./build/ci/04-release.sh'
                sh "./build/ci/04-release.sh ${params.semver}"
            }
        }
*/
    }
}