pipeline {
    agent any
    parameters {
        string( name: 'semver', defaultValue: '1.0.0',
         description: 'the resulting semver version number after running gitversion on the source at GitHub')
        string( name: 'branchname', defaultValue: 'master',
         description: 'the actual branch name that triggered the build as precurred from gitVersion') 
    }
    environment {
        REGISTRY='registry.t3winc.com'
        RELEASE='1.12.0'
        BRANCH_NAME="${params.branchname}"        
    }
    stages {
        
        stage("Initialization"){
            steps {
                buildName "${params.semver}"
                buildDescription "${params.branchname}"
                sh "curl -X PURGE https://camo.githubusercontent.com/132bc0b92c4749ac87e46bd5b905e7f9bf8be431c5cc8b350277d0fb007b05e4/68747470733a2f2f62616467652e743377696e632e636f6d2f696d616765732f626c6f674275696c642e737667"
                sh "curl -X PURGE https://camo.githubusercontent.com/d2745624399891de7f0043604a22cb34d604058c0cc1faf0e07fd78605f9aa25/68747470733a2f2f62616467652e743377696e632e636f6d2f696d616765732f626c6f674465762e737667"
                sh "curl -X PURGE https://camo.githubusercontent.com/ed74a5de223ce09bba3b0a1f10d032275e5d7de0f59bc93004e4bf60421a0ddc/68747470733a2f2f62616467652e743377696e632e636f6d2f696d616765732f626c6f6750726f642e737667"
            }
        }
        
        stage('Verify'){
            steps {
                sh 'chmod +x ./build/ci/00-verify.sh'
                sh './build/ci/00-verify.sh'
                echo "GIT_BRANCH: ${env.GIT_BRANCH}"
                echo "BRANCH_NAME: ${env.BRANCH_NAME}"
            }
        }

        stage('Version') {
            steps {
                echo "my semver version is: ${params.semver}"
                sh 'chmod +x ./build/ci/01-version.sh'
                sh './build/ci/01-version.sh'
            }
        }
        
        stage('Build'){
            steps {
                sh 'chmod +x ./build/ci/02-build.sh'
                sh './build/ci/02-build.sh'
            }
        }

        stage('Test-Image'){
            steps {
                script {
                    try {                           
                        def status = 0
                        status = sh(returnStdout: true, script: "container-structure-test test --image 'donaldonsoftware' --config './test/src/DockerTest/unit-test.yaml' --verbosity 'debug' --json | jq .Fail") as Integer
                        echo "$status"
                        if (status != 0) {                            
                            error 'Image Test has failed'
                        }

                    } catch (err) {
                        echo "$err"
                        error "Test-Image ERROR: The execution of the container structure tests failed, see the log for details."
                    } 
                }
            }
            post {
                success {
                    script {
                        sh "curl -o blogBuild.svg https://img.shields.io/badge/Blog_DoS-v${params.semver}-Green.svg"
                    }
                    sshagent(['83635231-8fbd-41cd-8899-efd9d11937ed']) {
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com ls /docker/badge -l"
                        sh "scp ./blogBuild.svg ubuntu@prod.t3winc.com:/docker/badge/images/blogBuild.svg"
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com chmod 0777 /docker/badge/images/blogBuild.svg"
                        sh "curl -X PURGE https://camo.githubusercontent.com/132bc0b92c4749ac87e46bd5b905e7f9bf8be431c5cc8b350277d0fb007b05e4/68747470733a2f2f62616467652e743377696e632e636f6d2f696d616765732f626c6f674275696c642e737667"
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com ls /docker/badge -l"
                    }
                }
                failure {
                    script {
                        sh "curl -o blogBuild.svg https://img.shields.io/badge/Blog_DoS-v${params.semver}-Red.svg"
                    }
                    sshagent(['83635231-8fbd-41cd-8899-efd9d11937ed']) {
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com ls /docker/badge -l"
                        sh "scp ./blogBuild.svg ubuntu@prod.t3winc.com:/docker/badge/images/blogBuild.svg"
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com chmod 0777 /docker/badge/images/blogBuild.svg"
                        sh "curl -X PURGE https://camo.githubusercontent.com/132bc0b92c4749ac87e46bd5b905e7f9bf8be431c5cc8b350277d0fb007b05e4/68747470733a2f2f62616467652e743377696e632e636f6d2f696d616765732f626c6f674275696c642e737667"
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com ls /docker/badge -l"
                    }                   
                }
            }
        }
        
        stage('Publish-Topic'){
            steps {
                sh 'chmod +x ./build/ci/03-publish-testing.sh'
                sh "./build/ci/03-publish-testing.sh ${params.semver}"
            }
        }

        stage('Publish-Master'){
            when {
                environment name: 'BRANCH_NAME', value: 'master'
            }
            steps {
                sh 'chmod +x ./build/ci/03-publish.sh'
                sh "./build/ci/03-publish.sh ${params.semver}"
            }
        }

        stage('Deploy'){
            steps {
                sh 'chmod +x ./build/ci/04-deploy.sh'
                sh "./build/ci/04-deploy.sh ${params.semver}"
            }
        }

         stage('Test-Deplopy'){
            steps {
                tpJobRun projectId: 'GYqn1YCHbUKFcsUnHsr-Tg', jobId: 'dMtILq6XMUCf-z0_qsOOkw', agentId: 'H3zXuEhE-kuxBS4mX_W9tg', waitJobFinishSeconds: 600
            }                       
            post {
                success {
                    script {
                        sh "curl -o blogDev.svg https://img.shields.io/badge/Blog_DoS-v${params.semver}-Green.svg"
                    }
                    sshagent(['83635231-8fbd-41cd-8899-efd9d11937ed']) {
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com ls /docker/badge -l"
                        sh "scp ./blogBuild.svg ubuntu@prod.t3winc.com:/docker/badge/images/blogDev.svg"
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com chmod 0777 /docker/badge/images/blogDev.svg"
                        sh "curl -X PURGE https://camo.githubusercontent.com/d2745624399891de7f0043604a22cb34d604058c0cc1faf0e07fd78605f9aa25/68747470733a2f2f62616467652e743377696e632e636f6d2f696d616765732f626c6f674465762e737667"
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com ls /docker/badge -l"
                    }                    
                }
                failure {
                    script {
                        sh "curl -o blogDev.svg https://img.shields.io/badge/Blog_DoS-v${params.semver}-Red.svg"
                    }
                    sshagent(['83635231-8fbd-41cd-8899-efd9d11937ed']) {
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com ls /docker/badge -l"
                        sh "scp ./blogBuild.svg ubuntu@prod.t3winc.com:/docker/badge/images/blogDev.svg"
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com chmod 0777 /docker/badge/images/blogDev.svg"
                        sh "curl -X PURGE https://camo.githubusercontent.com/d2745624399891de7f0043604a22cb34d604058c0cc1faf0e07fd78605f9aa25/68747470733a2f2f62616467652e743377696e632e636f6d2f696d616765732f626c6f674465762e737667"
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com ls /docker/badge -l"
                    }                    
                }
            }
        }

        stage('Release'){
            agent{
                label 'AWS-Jenkins-Slave'
            }            
            when {
                environment name: 'BRANCH_NAME', value: 'master'
            }
            steps {
                input 'Release to Production?'
                sh 'chmod +x ./build/ci/04-release.sh'
                sh "./build/ci/04-release.sh ${params.semver}"
            }
            post {
                success {
                    sh "python3 /var/jenkins_home/workspace/Affirm_Store/build/scripts/src/calendar-api.py Blog-DoS ${params.semver} 1199934081217038"
                    script {
                        sh "curl -o blogProd.svg https://img.shields.io/badge/Blog_DoS-v${params.semver}-Green.svg"
                    }
                    sshagent(['83635231-8fbd-41cd-8899-efd9d11937ed']) {
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com ls /docker/badge -l"
                        sh "scp ./blogBuild.svg ubuntu@prod.t3winc.com:/docker/badge/images/blogProd.svg"
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com chmod 0777 /docker/badge/images/blogProd.svg"
                        sh "curl -X PURGE https://camo.githubusercontent.com/ed74a5de223ce09bba3b0a1f10d032275e5d7de0f59bc93004e4bf60421a0ddc/68747470733a2f2f62616467652e743377696e632e636f6d2f696d616765732f626c6f6750726f642e737667"
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com ls /docker/badge -l"
                    }                   
                }
                failure {
                    script {
                        sh "curl -o blogProd.svg https://img.shields.io/badge/Blog_DoS-v${params.semver}-Red.svg"
                    }
                    sshagent(['83635231-8fbd-41cd-8899-efd9d11937ed']) {
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com ls /docker/badge -l"
                        sh "scp ./blogBuild.svg ubuntu@prod.t3winc.com:/docker/badge/images/blogProd.svg"
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com chmod 0777 /docker/badge/images/blogProd.svg"
                        sh "curl -X PURGE https://camo.githubusercontent.com/ed74a5de223ce09bba3b0a1f10d032275e5d7de0f59bc93004e4bf60421a0ddc/68747470733a2f2f62616467652e743377696e632e636f6d2f696d616765732f626c6f6750726f642e737667"
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@prod.t3winc.com ls /docker/badge -l"
                    }                   
                }
            }
        }
    }
    
    post {
        always {
            sh "curl -X PURGE https://camo.githubusercontent.com/132bc0b92c4749ac87e46bd5b905e7f9bf8be431c5cc8b350277d0fb007b05e4/68747470733a2f2f62616467652e743377696e632e636f6d2f696d616765732f626c6f674275696c642e737667"
            sh "curl -X PURGE https://camo.githubusercontent.com/d2745624399891de7f0043604a22cb34d604058c0cc1faf0e07fd78605f9aa25/68747470733a2f2f62616467652e743377696e632e636f6d2f696d616765732f626c6f674465762e737667"
            sh "curl -X PURGE https://camo.githubusercontent.com/ed74a5de223ce09bba3b0a1f10d032275e5d7de0f59bc93004e4bf60421a0ddc/68747470733a2f2f62616467652e743377696e632e636f6d2f696d616765732f626c6f6750726f642e737667"
        }
    }
}
