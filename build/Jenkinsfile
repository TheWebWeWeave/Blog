def getCurrentBranch() {
    return sh (
        script: 'git rev-parse --abbrev-ref HEAD',
        returnStdout: true
    ).trim()
}

pipeline {
    agent any
    parameters {
        string( name: 'semver', defaultValue: '1.0.0',
         description: 'the resulting semver version number after running gitversion on the source at GitHub')
    }
    environment {
        REGISTRY='ssh.t3winc.com:5000'
        RELEASE='1.11.0'
        BRANCHNAME=getCurrentBranch()
    }
    stages {
        stage('Verify'){
            steps {
                sh 'chmod +x ./build/ci/00-verify.sh'
                sh './build/ci/00-verify.sh'
                echo "GIT_BRANCH: ${env.GIT_BRANCH}"
            }
        }
        stage('Version') {
            steps {
                echo "my semver version is: ${params.semver}"
                sh 'chmod +x ./build/ci/01-version.sh'
                sh './build/ci/01-version.sh'
            }
        }
        stage('Build'){
            steps {
                sh 'chmod +x ./build/ci/02-build.sh'
                sh './build/ci/02-build.sh'
            }
        }
        stage('Publish-Testing'){
            steps {
                sh 'chmod +x ./build/ci/03-publish-testing.sh'
                sh "./build/ci/03-publish-testing.sh ${params.semver}"
            }
        }
        stage('Publish'){
            when {
                expression { GIT_BRANCH ==~ /(*master)/ }
            }
            steps {
                sh 'chmod +x ./build/ci/03-publish.sh'
                sh "./build/ci/03-publish.sh ${params.semver}"
            }
        }
        stage('Deploy'){
            steps {
                sh 'chmod +x ./build/ci/04-deploy.sh'
                sh "./build/ci/04-deploy.sh ${params.semver}"
            }
        }
        stage('Release'){
            when {
                expression { GIT_BRANCH ==~ /(*master)/ }
            }
            steps {
                sh 'chmod +x ./build/ci/04-release.sh'
                sh "./build/ci/04-release.sh ${params.semver}"
            }
        }
    }
}